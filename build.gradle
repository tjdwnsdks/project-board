plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.6'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

group = 'com.bitstudy'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = "17"

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // rest repo 추가
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.data:spring-data-rest-hal-explorer'

    // Jpa, h2, jdbc 추가
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // queryDSL 설정 (저 밑에도 하나 더 있음)
    implementation "com.querydsl:querydsl-jpa"
    implementation "com.querydsl:querydsl-core"
    implementation "com.querydsl:querydsl-collections"
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa" // querydsl JPAAnnotationProcessor 사용 지정
    annotationProcessor "jakarta.annotation:jakarta.annotation-api" // java.lang.NoClassDefFoundError (javax.annotation.Generated) 대응 코드
    annotationProcessor "jakarta.persistence:jakarta.persistence-api" // java.lang.NoClassDefFoundError (javax.annotation.Entity) 대응 코드

    // thymeleaf
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
}

tasks.named('test') {
    useJUnitPlatform()
}
//targetCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_17

//////////////  queryDSL 설정부  시작 ////////////////////////////
// 이게 없어도 queryDsl 이 동작하긴 한다. 그러나 인텔리제이에서 build 하다가 가끔씩 이슈가 생겨서 별도의 설정을 했다.
// queryDSL 설정
def generated = 'src/main/generated' // 파일 경로를 지정해주는거. 원래는 실행하면 알아서 generated 폴더가 만들어진다.
                                            // 우리가 건드릴건 없지만... 인텔리제이에서 혹시라도 자동으로 안생기면 그냥 만들어주면 됨

// queryDSL QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
    main.java.srcDirs += [ generated ]
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
    delete file(generated)
}
/* 여기까지 했으면 gradle 리프레시 하고, 우측에 Gradle 탭 열어서 
* Dependencies  안에  compileClasspath 안에 열어보면 com.querydsl 들 있을거임.

* 확인 했으면 Dependencies 위에  Tasks  안에  build  안에  build 더블클릭해서 빌드 해보기
* (시간이 좀 걸릴거임) 이렇게 하면 프로젝트 폴더에 build 라는 폴더 생기고
* src > main > generated 생김
* 
* gradle clean 하면 generated 폴더 없어지는 지 확인하기
* (build  안에  clean 더블클릭)
*
* 없어진거 확인하면 queryDsl 을 사용할 준비는 끝난거임 **/

/*
* 이제 API 검색기능 넣는거 해보러 가자!
* repository > ArticleRepository 파일로 가자!
*   */
//////////////  queryDSL 설정부  끝 ////////////////////////////
