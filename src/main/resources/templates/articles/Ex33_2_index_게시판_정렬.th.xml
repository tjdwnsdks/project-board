<?xml version="1.0"?>

<thlogic>
    <attr sel="#header" th:replace="header :: #header" />
    <attr sel="#footer" th:replace="footer :: #footer" />


<attr sel="main" th:object="${articles}"> <!-- main 잡아서 ${articles} 넣어주고 요 밑에 게시판 정렬 관련 부분에서 *{} 로 쓸 수 있게 하자.  -->
    <attr sel="#article-table">
<!-- 이번엔 여기 하는거임!!!!
    - 게시판 정렬
        index.html 에서 thead 영역꺼를 건드리는거니까 이 자리에 코드를 넣자!
-->
        <attr sel="thead/tr"> <!-- 이거 돌리면 /articles?page=0&sort=title 이 주소로 나옴 -->
            <attr sel="th.title/a" th:text="'제목'" th:href="@{/articles(
            page=${articles.number},
            sort='title' + (*{sort.getOrderFor('title')} != null ? (*{sort.getOrderFor('title').direction.name} != 'DESC' ? ',desc' : '') : '')
        )}"/>
            <!-- 해설: 'page=${articles.number}'의 number 는 ArticleController.java 에서
                       Page<ArticleResponse> articles 가 있는데 articles 에 Page 관련 정보들 다 넣어놓은 상태인데.
                       원래 자바코드에서 그걸 보려면 getter 방식인 articles.getNumber() 를 이용해서 현재 페이지를 뽑아볼수 있다.
                       근데 여기서는 get만 빼고 일반 필드처럼 number 라고 써서 사용할 수 있다.

                       *{sort.getOrderFor('title') 은 현재 title의 정렬 정보를 불러오는거다.
                       ${articles.sort.getOrderFor('title') 로 써도 되는데, 저 위에 <attr sel="main" th:object="${articles}"> 써서
                       줄임방식 *{} 으로 쓰자.
                       sort 도 원래 ArticleContorller 에서 articles.getSort() 처럼 getter 인데 get 생략한거다.

                       *{sort.getOrderFor('title')} != null  =>  이 말은 기존에 title 로 정렬이 되어 있었는지 확인하는거임.
                       *{sort.getOrderFor('title').direction.name} != 'DESC'  =>  이건 기존에 방향이 내림차순이었는지 확인
            -->

            <attr sel="th.hashtag/a" th:text="'해시태그'" th:href="@{/articles(
            page=${articles.number},
            sort='hashtag' + (*{sort.getOrderFor('hashtag')} != null ? (*{sort.getOrderFor('hashtag').direction.name} != 'DESC' ? ',desc' : '') : '')
        )}"/>
            <attr sel="th.user-id/a" th:text="'작성자'" th:href="@{/articles(
            page=${articles.number},
            sort='userAccount.userId' + (*{sort.getOrderFor('userAccount.userId')} != null ? (*{sort.getOrderFor('userAccount.userId').direction.name} != 'DESC' ? ',desc' : '') : '')
        )}"/>
            <!-- 해설: sort='userAccount.userId' 이부분을 조심해야 한다.
                    그냥 작성자니까 이렇게 복잡하게 쓰기 싫으면 nickname 쓰면 안되나 할 수도 있지만 그것도 안된다.
                    설명하려면 좀 길고 복잡하니깐 잘 정리가 필요하다.
                      왜 얘만 userId 앞에 userAccount 가 붙었냐면
                      모델로 받은 articles는 ArticleController.java 가보면  articleService.searchArticles( 이 부분의 값이 저장되는건데
                      ArticleService.java 에 있는 searchArticles() 메서드 가보면 아래쪽에 (case ID 부분) id 검색하는거 관련 부분 가보면
                      articleRepository.findByUserAccount_UserIdContaining(searchKeyword, pageable) 이거 있다.
                      findByTitleContaining 이걸 타고 ArticleRepository.java 가보면 얘는 결국 Page<Article> findByUserAccount_UserIdContaining 다
                      한마디로 Page에 저장되는것들은 다 Article 엔티티 라는건데, 엔티티 파일 가보면 거기에는 일단 nickname 없고
                      userId 도 없다. userId 가려면 @ManyToOne 으로 걸어놓은 UserAccount 를 통해서 userId 를 가져올수 있다.
                      그래서 sort 에 userAccount.userId 를 쓴거다.

                      너무 어려우면 일단 얍삽이로 가자!!
                      일단 userId 찐으로 가지고 있는애가 누군지 먼저 찾아보고(왠만하면 엔티티임), 그 파일명.userId 처럼 쓰면 왠만해선 다 됨.
            -->

            <attr sel="th.created-at/a" th:text="'작성일'" th:href="@{/articles(
            page=${articles.number},
            sort='createdAt' + (*{sort.getOrderFor('createdAt')} != null ? (*{sort.getOrderFor('createdAt').direction.name} != 'DESC' ? ',desc' : '') : '')
        )}"/>
        </attr>

<!-- 기본 정렬 기준은 ArticleController.java 에 @PageableDefault(size=10 ...  이 부분에 명시해놨다. -->

<!-- 여기까지 하고 브라우저 가서 확인해보기.
     아마 각 컬럼들 타이틀이 a 태그때문에 파란색으로 바껴있을거다. 그부분 CSS 바꿔주면 됨
     resources > static > css > index.css
     *충격고백: 사실 그냥 templates > articles 안에 html 이랑 같이 둬도 되긴 된다....

     data.sql 에 user 데이터 하나 더 넣어서 정렬할때 구분되게 해도 된다
-->

<!-- /////////////////////////////////////////////////////////////////////////////////////////////-->
<!-- /////////////////////////////////////////////////////////////////////////////////////////////-->
<!-- /////////////////////////////////// 이번 파일은 여기까지임!!! ///////////////////////////////////-->
<!-- /////////////////////////////////// 이번 파일은 여기까지임!!! ///////////////////////////////////-->
<!-- /////////////////////////////////////////////////////////////////////////////////////////////-->
<!-- /////////////////////////////////////////////////////////////////////////////////////////////-->


        <attr sel="tbody" th:remove="all-but-first">
            <attr sel="tr[0]" th:each="article : ${articles}">
                <attr sel="td.title/a" th:text="${article.title}" th:href="@{'/articles/'+${article.id}}" />
                <attr sel="td.hashtag" th:text="${article.hashtag}" />
                <attr sel="td.user-id" th:text="${article.nickname}" />
                <attr sel="td.created-at/time" th:datetime="${article.createdAt}" th:text="${#temporals.format(article.createdAt, 'yyyy-MM-dd')}" />
            </attr>
        </attr>
    </attr>





    <attr sel="#tmp" th:value="${paginationBarNumbers}"/> <!-- 전체 배열 -->
    <attr sel="#tmp_length" th:value="${#lists.size(paginationBarNumbers)}"/> <!-- 배열 길이-->
    <attr sel="#tmp_start" th:value="${paginationBarNumbers[0]}"/> <!-- 0번방 값-->
    <attr sel="#tmp_end" th:value="${paginationBarNumbers[#lists.size(paginationBarNumbers) - 1]}"/> <!-- 마지막번방 값-->

<!--    페이지네이션 - 우선 페이지네이션은 현재 보고있는 페이지 번호가 가운데에 오게 할거다.
        ex) 현재 6페이지에 들어와 있으면 출력이 '이전' 4 5 6 7 8 '다음' 이렇게 나오게.-->
    <attr sel="#pagination">
        <attr sel="li[0]/a"
              th:text="'previous'"
              th:href=" @{/articles(page=${articles.number - 1})}"
              th:class="'page-link' + (${articles.number} <= 0 ? ' disabled' : '')"
        />

<!--    일반적인 페이지네이션 하려면 href 부분만 바꾸면 된다. 여기랑 PaginationService.java 에서 startNumber 부분 바꿔주면 됨
        th:href=" @{/articles(page=${paginationBarNumbers[0] - 1})}"-->


        <!-- 해설: @{/articles(page=${articles.number - 1})} 이거  돌리면 이렇게 나옴  = > /articles?page=1
                  href 속성은 @ 로 시작한다.
                  첫번째 /articles 는 경로, 그 뒤에 (page=${articles.number - 1}) 는 ? 뒤에 들어갈 정보를 뜻한다.
                  ${articles 는 모델로 넘겨주는 키값이었고, 그 안에서 number 를 받을수 있다.
                  그래서 그 number 가 현재 페이지 번호가 될거고 -1 하면 이전 페이지가 되는거다.

               th:class 부분에서 'disabled' 는 부트스트랩에서 비활성화를 하게 하는 클래스다.
                만약 현재 페이지(articles.number) 가 0 이면 '이전' 버튼이 비활성화 되야 하니까 삼항연산자로 했음.
                (PaginationService.java 에서 Math.min 부분에서 음수 안나오게 막았었음) 그거임.
                  -->


        <attr sel="li[1]" th:class="page-item" th:each="pageNumber : ${paginationBarNumbers}">
            <attr sel="a"
                  th:text="${pageNumber + 1}"
                  th:href="@{/articles(page=${pageNumber})}"
                  th:class="'page-link' + (${pageNumber} == ${articles.number} ? ' disabled' : '')"
            />
        </attr>

        <attr sel="li[2]/a"
              th:text="'next'"
              th:href="@{/articles(page=${articles.number + 1})}"
              th:class="'page-link' + (${articles.number} >= ${articles.totalPages - 1} ? ' disabled' : '')"
        />
        <!--    일반적인 페이지네이션 하려면 href 부분만 바꾸면 된다. 여기랑 PaginationService.java 에서 startNumber 부분 바꿔주면 됨
                  th:href="@{/articles(page=${paginationBarNumbers[#lists.size(paginationBarNumbers) - 1] + 1})}"  -->
    </attr>
</attr>
</thlogic>


<!-- 여기까지 다 하고,
        1) 저장(Ctrl + S)
        2) 리빌드 (ctrl + Shift + F9) 하고
        3) service 탭 가서 실행 (ctrl + Shift + F10) 하고
        4) 브라우저 가서 http://localhost:8080/articles 치면  DB 연결되서 나옴

        링크도 이제 연결해서 게시글 클릭하면 상세페이지로 넘어가는데 아직 그건 안했으니깐 아무것도 안나올거임.
-->
